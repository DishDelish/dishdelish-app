plugins {
    id 'com.android.application'
    id 'jacoco'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.github.siela1915.bootcamp'
    compileSdk 33

    defaultConfig {
        applicationId "com.github.dishdelish"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        buildConfigField("String", "API_KEY", webApiKey)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "String", "SERVER_URL", '"http://127.0.0.1:8080"'
            testCoverageEnabled true
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    def fragment_version = "1.5.5"

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.3')

    // When using the BoM, you don't specify versions in Firebase library dependencies

    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-common-ktx:20.1.0'
    implementation 'com.google.firebase:firebase-database:20.1.0'
    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'
    implementation 'com.google.firebase:firebase-auth:21.1.0'
    implementation 'com.google.firebase:firebase-messaging:23.1.2'
    implementation 'com.google.firebase:firebase-analytics:21.2.1'
    implementation 'com.firebase:geofire-android:3.2.0'

    implementation 'com.google.android.material:material:<version>'
    implementation 'androidx.viewpager:viewpager:1.1.0-alpha01'

    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.fragment:fragment:1.5.5"
    implementation("androidx.test.espresso:espresso-contrib:3.5.1", {
        exclude group: 'com.google.protobuf', module: 'protobuf-lite' // necessary to avoid library clash with firebase-bom
    })
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20140107'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    debugImplementation "androidx.fragment:fragment-testing:1.5.5"



    //Retrofit dependencies for API calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    implementation 'com.google.code.gson:gson:2.8.7'

    //API testing dependencies
    testImplementation 'org.mockito:mockito-core:3.3.3'
    androidTestImplementation 'org.mockito:mockito-core:3.3.3'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.3.0'

    // Picasso for downloading images from URL
    implementation 'com.squareup.picasso:picasso:2.71828'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

tasks.register("copyEmmaReport", Copy) {
    from layout.buildDirectory.file("outputs/code_coverage/debugAndroidTest/connected/Pixel_2_API_33(AVD) - 13/coverage.ec")
    into layout.buildDirectory.file("outputs/code_coverage/debugAndroidTest/connected/")
    rename '(.*).ec', '$1.exec'
}

connectedCheck {
    finalizedBy jacocoTestReport
}

tasks.register("ideaCoverage") {
    dependsOn connectedCheck
    finalizedBy copyEmmaReport
}